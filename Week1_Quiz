{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOMRpHfxkpSOkqKDLg5w2MT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SJongH/GroupA/blob/main/Week1_Quiz\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "def timer(func):\n",
        "  def wrapper(*args, **kwargs):\n",
        "    start_time  = time.time()\n",
        "    result = func (*args, **kwargs)\n",
        "    end_time = time.time()\n",
        "    computation_time = end_time - start_time\n",
        "    print(f\"Execution time of {func.__name__} {computation_time} seconds\")\n",
        "    return result\n",
        "  return wrapper"
      ],
      "metadata": {
        "id": "K0AuGwMv37L4"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Generation\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "true_b = 1\n",
        "true_w = 2\n",
        "N = 100\n",
        "\n",
        "np.random.seed(42)\n",
        "x = np.random.rand(N, 1)\n",
        "epsilon = (0.1 * np.random.randn(N, 1))\n",
        "y = true_b + true_w * x + epsilon\n",
        "# * : dot product, @ : matrix multiplication"
      ],
      "metadata": {
        "id": "4LnDKlA3NrQ-"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train-Validation Split\n",
        "\n",
        "idx = np.arange(N)\n",
        "split_idx = int(0.8 * N) # 4:1로 나누는게 국룰\n",
        "train_idx = idx[:split_idx]\n",
        "val_idx = idx[split_idx:]\n",
        "\n",
        "x_train, y_train = x[train_idx], y[train_idx]\n",
        "x_val, y_val = x[val_idx], y[val_idx]\n",
        "\n",
        "# scikit-learn 패키지로 쉽게 가능"
      ],
      "metadata": {
        "id": "c81go33SOvVu"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@timer\n",
        "def train_model_numpy(lr = 0.1, epochs = 1000):\n",
        "  b = np.random.randn(1)\n",
        "  w = np.random.randn(1)\n",
        "\n",
        "  for epoch in range(epochs):\n",
        "    y_hat = b+w*x_train\n",
        "    error = (y_hat - y_train)\n",
        "    mse_loss = np.mean(error ** 2)\n",
        "\n",
        "\n",
        "    b_grad = 2 * np.mean(error)\n",
        "    w_grad = 2 * np.mean(x_train * error)\n",
        "    b = b - lr * b_grad\n",
        "    w = w - lr * w_grad\n",
        "  return b, w\n"
      ],
      "metadata": {
        "id": "IBR9vJDxPQk1"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b, w = train_model_numpy()\n",
        "\n",
        "print('b_estimate: {}, w_estimate: {}'.format(b, w))"
      ],
      "metadata": {
        "id": "HEAyHnc3PtQx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d5b42fa-1de7-4178-9087-4c903d2a8b05"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Execution time of train_model_numpy 0.04592108726501465 seconds\n",
            "b_estimate: [1.02341381], w_estimate: [1.93680715]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Generation with Pytorch\n",
        "\n",
        "import torch\n",
        "# create tensor in cpu\n",
        "x_train_tensor = torch.as_tensor(x_train)\n",
        "y_train_tensor = torch.as_tensor(y_train)\n",
        "\n",
        "# create tensor in gpu\n",
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "x_train_tensor = torch.as_tensor(x_train).to(device)\n",
        "y_train_tensor = torch.as_tensor(y_train).to(device)"
      ],
      "metadata": {
        "id": "sr8yQZAh1RpX"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@timer\n",
        "def train_model_torch(lr = 0.1, epochs = 1000):\n",
        "  b = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  w = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "\n",
        "  for epoch in range(epochs):\n",
        "    y_hat = b + w * x_train_tensor\n",
        "    error = (y_hat - y_train_tensor)\n",
        "    mse_loss = torch.mean(error**2)\n",
        "    mse_loss.backward()\n",
        "\n",
        "    # in-place operation 을 이용하므로 no_grad로 사용해야함\n",
        "    # 일정한 id를 유지하기위해 in-place operation을 사용함\n",
        "\n",
        "    with torch.no_grad():\n",
        "      b -= lr * b.grad\n",
        "      w -= lr * w.grad\n",
        "    # _: in-place operation 사용하라는 규칙\n",
        "    b.grad.zero_()\n",
        "    w.grad.zero_()\n",
        "  return b, w"
      ],
      "metadata": {
        "id": "JXtmBaM361fW"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b, w = train_model_torch()\n",
        "print('b_estimate: {}, w_estimate: {}'.format(b.item(), w.item()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zMbGPfFSAfcD",
        "outputId": "73039e69-6f98-4990-dfc8-2ef378af5d2a"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Execution time of train_model_torch 0.1867084503173828 seconds\n",
            "b_estimate: 1.0234160423278809, w_estimate: 1.936802864074707\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.optim as optim\n",
        "import torch.nn as nn\n",
        "\n",
        "def train_model_torch(lr = 0.1, epochs = 1000):\n",
        "  b = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  w = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  parameters = [b, w]\n",
        "  optimizer = optim.SGD(parameters, lr = lr)\n",
        "  mse_loss = nn.MSELoss()\n",
        "\n",
        "  for epoch in range(epochs):\n",
        "    y_hat = b + w*x_train_tensor\n",
        "    loss = mse_loss(y_hat, y_train_tensor)\n",
        "\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "  return b, w\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "5sr11DhaAnkP"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b, w = train_model_torch()\n",
        "print('b_estimate: {}, w_estimate: {}'.format(b.item(), w.item()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XLeo7TRVCp90",
        "outputId": "e2cefb11-3bc8-48b1-ca96-babdf6b8fb4e"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Execution time of train_model_torch 0.2811307907104492 seconds\n",
            "b_estimate: 1.0234160423278809, w_estimate: 1.936802864074707\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Quiz 1\n",
        "- test data 에서 MSE eroor 계산 코드 구현\n"
      ],
      "metadata": {
        "id": "fgaCS6DhHZKH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_val_tensor = torch.as_tensor(x_val).to(device)\n",
        "y_val_tensor = torch.as_tensor(y_val).to(device)"
      ],
      "metadata": {
        "id": "tQdfM6rVCtuT"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_estimate = b+ w*x_val_tensor\n",
        "mseloss = nn.MSELoss()\n",
        "error = mseloss(y_val_tensor, y_estimate)\n",
        "print(error)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBddl488EEgO",
        "outputId": "c7c160d4-5f2e-4ac6-ad8f-d003a1b5d8a0"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(0.0098, dtype=torch.float64, grad_fn=<MseLossBackward0>)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Quiz 2\n",
        "- 데이터셋 fitting 하는 함수의 parameter 추정"
      ],
      "metadata": {
        "id": "53bIN_SDJnEZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = pd.read_pickle('/content/quiz_data.pkl')"
      ],
      "metadata": {
        "id": "nexo7wtHI4Y6"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "N = int(len(data['x']))\n",
        "idx = np.arange(N)\n",
        "split_idx = int(0.8 * N)\n",
        "train_idx = idx[:split_idx]\n",
        "test_idx = idx[split_idx:]"
      ],
      "metadata": {
        "id": "qO8YxzVtK_Ub"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train_tensor = torch.as_tensor(data['x'][train_idx]).to(device)\n",
        "y_train_tensor = torch.as_tensor(data['y'][train_idx]).to(device)\n",
        "x_test_tensor = torch.as_tensor(data['x'][test_idx]).to(device)\n",
        "y_test_tensor = torch.as_tensor(data['y'][test_idx]).to(device)"
      ],
      "metadata": {
        "id": "aGIGAucPJ6Fd"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@timer\n",
        "def train_model(lr = 0.3, epochs = 1500):\n",
        "  w2 = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  w = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  b = torch.randn(1, requires_grad = True, dtype = torch.float, device = device)\n",
        "  parameters = [w, w2, b]\n",
        "  optimizer = optim.SGD(parameters, lr=lr)\n",
        "  mseloss = nn.MSELoss()\n",
        "  for epoch in range(epochs):\n",
        "    y_hat = w * x_train_tensor+w2*(x_train_tensor**2) + b\n",
        "    loss = mseloss(y_hat, y_train_tensor)\n",
        "\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "  return w, w2, b\n",
        "\n"
      ],
      "metadata": {
        "id": "pvmKMk_gKYUc"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def estimate(w, w2, b):\n",
        "  y_estimate = b+ w*x_val_tensor +w2*(x_val_tensor**2)\n",
        "  mseloss = nn.MSELoss()\n",
        "  error = mseloss(y_test_tensor, y_estimate)\n",
        "  return error"
      ],
      "metadata": {
        "id": "cM598XzmQmTH"
      },
      "execution_count": 106,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "errors = []\n",
        "parameters = []\n",
        "for i in range(10):\n",
        "  w, w2, b = train_model()\n",
        "  parameters.append((w,w2, b))\n",
        "  error = estimate(w,w2, b)\n",
        "  errors.append(error)\n",
        "\n",
        "print(errors)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TYS9BZX5Qous",
        "outputId": "2f1bdf9d-5cb9-4f45-e4fb-6068339f8200"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Execution time of train_model 0.4902799129486084 seconds\n",
            "Execution time of train_model 0.5033102035522461 seconds\n",
            "Execution time of train_model 0.47930073738098145 seconds\n",
            "Execution time of train_model 0.4897925853729248 seconds\n",
            "Execution time of train_model 0.5152542591094971 seconds\n",
            "Execution time of train_model 0.5087814331054688 seconds\n",
            "Execution time of train_model 0.48183441162109375 seconds\n",
            "Execution time of train_model 0.49210405349731445 seconds\n",
            "Execution time of train_model 0.49263620376586914 seconds\n",
            "Execution time of train_model 0.49375057220458984 seconds\n",
            "[tensor(0.0755, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0785, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0771, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0776, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0768, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0764, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0768, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0766, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0771, dtype=torch.float64, grad_fn=<MseLossBackward0>), tensor(0.0764, dtype=torch.float64, grad_fn=<MseLossBackward0>)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cD42pdFdRwWI"
      },
      "execution_count": 107,
      "outputs": []
    }
  ]
}